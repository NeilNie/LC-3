// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/20/2019 11:31:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Bus;
reg [15:0] MARSpcIn;
reg [15:0] MDRSpcIn;
reg clk;
reg ldMAR;
reg ldMARSpcIn;
reg ldMDR;
reg memWE;
reg reset;
reg [1:0] selMDR;
// wires                                               
wire [15:0] MAROut;
wire [15:0] MDROut;
wire [15:0] memOut;

// assign statements (if any)                          
Memory i1 (
// port map - connection between master ports and signals/registers   
	.Bus(Bus),
	.MAROut(MAROut),
	.MARSpcIn(MARSpcIn),
	.MDROut(MDROut),
	.MDRSpcIn(MDRSpcIn),
	.clk(clk),
	.ldMAR(ldMAR),
	.ldMARSpcIn(ldMARSpcIn),
	.ldMDR(ldMDR),
	.memOut(memOut),
	.memWE(memWE),
	.reset(reset),
	.selMDR(selMDR)
);
initial 
begin 
#100000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// Bus[ 15 ]
initial
begin
	Bus[15] = 1'b0;
	Bus[15] = #20000 1'b1;
	Bus[15] = #20000 1'b0;
	Bus[15] = #20000 1'b1;
	Bus[15] = #10000 1'b0;
end 
// Bus[ 14 ]
initial
begin
	Bus[14] = 1'b0;
	Bus[14] = #20000 1'b1;
	Bus[14] = #20000 1'b0;
end 
// Bus[ 13 ]
initial
begin
	Bus[13] = 1'b0;
	Bus[13] = #20000 1'b1;
	Bus[13] = #20000 1'b0;
end 
// Bus[ 12 ]
initial
begin
	Bus[12] = 1'b0;
	Bus[12] = #20000 1'b1;
	Bus[12] = #20000 1'b0;
end 
// Bus[ 11 ]
initial
begin
	Bus[11] = 1'b0;
	Bus[11] = #20000 1'b1;
	Bus[11] = #20000 1'b0;
end 
// Bus[ 10 ]
initial
begin
	Bus[10] = 1'b0;
	Bus[10] = #30000 1'b1;
	Bus[10] = #10000 1'b0;
end 
// Bus[ 9 ]
initial
begin
	Bus[9] = 1'b0;
	Bus[9] = #30000 1'b1;
	Bus[9] = #10000 1'b0;
end 
// Bus[ 8 ]
initial
begin
	Bus[8] = 1'b0;
end 
// Bus[ 7 ]
initial
begin
	Bus[7] = 1'b0;
end 
// Bus[ 6 ]
initial
begin
	Bus[6] = 1'b0;
end 
// Bus[ 5 ]
initial
begin
	Bus[5] = 1'b0;
end 
// Bus[ 4 ]
initial
begin
	Bus[4] = 1'b0;
end 
// Bus[ 3 ]
initial
begin
	Bus[3] = 1'b0;
end 
// Bus[ 2 ]
initial
begin
	Bus[2] = 1'b0;
end 
// Bus[ 1 ]
initial
begin
	Bus[1] = 1'b0;
end 
// Bus[ 0 ]
initial
begin
	Bus[0] = 1'b0;
end 

// ldMAR
initial
begin
	ldMAR = 1'b1;
	ldMAR = #10000 1'b0;
	ldMAR = #10000 1'b1;
	ldMAR = #10000 1'b0;
	ldMAR = #30000 1'b1;
	ldMAR = #10000 1'b0;
end 

// ldMDR
initial
begin
	ldMDR = 1'b0;
	ldMDR = #10000 1'b1;
	ldMDR = #10000 1'b0;
	ldMDR = #10000 1'b1;
	ldMDR = #10000 1'b0;
	ldMDR = #30000 1'b1;
	ldMDR = #10000 1'b0;
end 
// selMDR[ 1 ]
initial
begin
	selMDR[1] = 1'b0;
	selMDR[1] = #10000 1'b1;
	selMDR[1] = #10000 1'b0;
end 
// selMDR[ 0 ]
initial
begin
	selMDR[0] = 1'b0;
	selMDR[0] = #10000 1'b1;
	selMDR[0] = #10000 1'b0;
	selMDR[0] = #50000 1'b1;
	selMDR[0] = #10000 1'b0;
end 

// memWE
initial
begin
	memWE = 1'b1;
	memWE = #20000 1'b0;
	memWE = #10000 1'b1;
	memWE = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// ldMARSpcIn
initial
begin
	ldMARSpcIn = 1'b1;
	ldMARSpcIn = #10000 1'b0;
end 
// MARSpcIn[ 15 ]
initial
begin
	MARSpcIn[15] = 1'b1;
	MARSpcIn[15] = #10000 1'b0;
end 
// MARSpcIn[ 14 ]
initial
begin
	MARSpcIn[14] = 1'b0;
end 
// MARSpcIn[ 13 ]
initial
begin
	MARSpcIn[13] = 1'b0;
end 
// MARSpcIn[ 12 ]
initial
begin
	MARSpcIn[12] = 1'b0;
end 
// MARSpcIn[ 11 ]
initial
begin
	MARSpcIn[11] = 1'b0;
end 
// MARSpcIn[ 10 ]
initial
begin
	MARSpcIn[10] = 1'b0;
end 
// MARSpcIn[ 9 ]
initial
begin
	MARSpcIn[9] = 1'b0;
end 
// MARSpcIn[ 8 ]
initial
begin
	MARSpcIn[8] = 1'b0;
end 
// MARSpcIn[ 7 ]
initial
begin
	MARSpcIn[7] = 1'b0;
end 
// MARSpcIn[ 6 ]
initial
begin
	MARSpcIn[6] = 1'b0;
end 
// MARSpcIn[ 5 ]
initial
begin
	MARSpcIn[5] = 1'b0;
end 
// MARSpcIn[ 4 ]
initial
begin
	MARSpcIn[4] = 1'b0;
end 
// MARSpcIn[ 3 ]
initial
begin
	MARSpcIn[3] = 1'b0;
end 
// MARSpcIn[ 2 ]
initial
begin
	MARSpcIn[2] = 1'b0;
end 
// MARSpcIn[ 1 ]
initial
begin
	MARSpcIn[1] = 1'b0;
end 
// MARSpcIn[ 0 ]
initial
begin
	MARSpcIn[0] = 1'b0;
end 
// MDRSpcIn[ 15 ]
initial
begin
	MDRSpcIn[15] = 1'b0;
	MDRSpcIn[15] = #10000 1'b1;
	MDRSpcIn[15] = #10000 1'b0;
end 
// MDRSpcIn[ 14 ]
initial
begin
	MDRSpcIn[14] = 1'b0;
	MDRSpcIn[14] = #10000 1'b1;
	MDRSpcIn[14] = #10000 1'b0;
end 
// MDRSpcIn[ 13 ]
initial
begin
	MDRSpcIn[13] = 1'b0;
	MDRSpcIn[13] = #10000 1'b1;
	MDRSpcIn[13] = #10000 1'b0;
end 
// MDRSpcIn[ 12 ]
initial
begin
	MDRSpcIn[12] = 1'b0;
end 
// MDRSpcIn[ 11 ]
initial
begin
	MDRSpcIn[11] = 1'b0;
end 
// MDRSpcIn[ 10 ]
initial
begin
	MDRSpcIn[10] = 1'b0;
end 
// MDRSpcIn[ 9 ]
initial
begin
	MDRSpcIn[9] = 1'b0;
end 
// MDRSpcIn[ 8 ]
initial
begin
	MDRSpcIn[8] = 1'b0;
end 
// MDRSpcIn[ 7 ]
initial
begin
	MDRSpcIn[7] = 1'b0;
end 
// MDRSpcIn[ 6 ]
initial
begin
	MDRSpcIn[6] = 1'b0;
end 
// MDRSpcIn[ 5 ]
initial
begin
	MDRSpcIn[5] = 1'b0;
end 
// MDRSpcIn[ 4 ]
initial
begin
	MDRSpcIn[4] = 1'b0;
end 
// MDRSpcIn[ 3 ]
initial
begin
	MDRSpcIn[3] = 1'b0;
end 
// MDRSpcIn[ 2 ]
initial
begin
	MDRSpcIn[2] = 1'b0;
end 
// MDRSpcIn[ 1 ]
initial
begin
	MDRSpcIn[1] = 1'b0;
end 
// MDRSpcIn[ 0 ]
initial
begin
	MDRSpcIn[0] = 1'b0;
end 
endmodule

