// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/12/2019 10:17:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] IR;
reg [15:0] Ra;
reg [15:0] Rb;
reg [1:0] aluControl;
// wires                                               
wire [15:0] aluOut;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.IR(IR),
	.Ra(Ra),
	.Rb(Rb),
	.aluControl(aluControl),
	.aluOut(aluOut)
);
initial 
begin 
#100000 $finish;
end 
// aluControl[ 1 ]
initial
begin
	aluControl[1] = 1'b0;
	aluControl[1] = #20000 1'b1;
	aluControl[1] = #20000 1'b0;
	aluControl[1] = #20000 1'b1;
	aluControl[1] = #20000 1'b0;
end 
// aluControl[ 0 ]
initial
begin
	aluControl[0] = 1'b0;
	aluControl[0] = #10000 1'b1;
	aluControl[0] = #10000 1'b0;
	aluControl[0] = #10000 1'b1;
	aluControl[0] = #10000 1'b0;
	aluControl[0] = #10000 1'b1;
	aluControl[0] = #10000 1'b0;
	aluControl[0] = #10000 1'b1;
	aluControl[0] = #10000 1'b0;
end 
// Ra[ 15 ]
initial
begin
	Ra[15] = 1'b0;
end 
// Ra[ 14 ]
initial
begin
	Ra[14] = 1'b0;
end 
// Ra[ 13 ]
initial
begin
	Ra[13] = 1'b0;
end 
// Ra[ 12 ]
initial
begin
	Ra[12] = 1'b0;
end 
// Ra[ 11 ]
initial
begin
	Ra[11] = 1'b0;
end 
// Ra[ 10 ]
initial
begin
	Ra[10] = 1'b0;
end 
// Ra[ 9 ]
initial
begin
	Ra[9] = 1'b0;
end 
// Ra[ 8 ]
initial
begin
	Ra[8] = 1'b0;
end 
// Ra[ 7 ]
initial
begin
	Ra[7] = 1'b0;
end 
// Ra[ 6 ]
initial
begin
	Ra[6] = 1'b0;
end 
// Ra[ 5 ]
initial
begin
	Ra[5] = 1'b0;
end 
// Ra[ 4 ]
initial
begin
	Ra[4] = 1'b0;
end 
// Ra[ 3 ]
initial
begin
	Ra[3] = 1'b0;
end 
// Ra[ 2 ]
initial
begin
	Ra[2] = 1'b1;
	Ra[2] = #80000 1'b0;
end 
// Ra[ 1 ]
initial
begin
	Ra[1] = 1'b1;
	Ra[1] = #80000 1'b0;
end 
// Ra[ 0 ]
initial
begin
	Ra[0] = 1'b1;
	Ra[0] = #80000 1'b0;
end 
// Rb[ 15 ]
initial
begin
	Rb[15] = 1'b0;
end 
// Rb[ 14 ]
initial
begin
	Rb[14] = 1'b0;
end 
// Rb[ 13 ]
initial
begin
	Rb[13] = 1'b0;
end 
// Rb[ 12 ]
initial
begin
	Rb[12] = 1'b0;
end 
// Rb[ 11 ]
initial
begin
	Rb[11] = 1'b0;
end 
// Rb[ 10 ]
initial
begin
	Rb[10] = 1'b0;
end 
// Rb[ 9 ]
initial
begin
	Rb[9] = 1'b0;
end 
// Rb[ 8 ]
initial
begin
	Rb[8] = 1'b0;
end 
// Rb[ 7 ]
initial
begin
	Rb[7] = 1'b0;
end 
// Rb[ 6 ]
initial
begin
	Rb[6] = 1'b0;
end 
// Rb[ 5 ]
initial
begin
	Rb[5] = 1'b0;
end 
// Rb[ 4 ]
initial
begin
	Rb[4] = 1'b1;
	Rb[4] = #80000 1'b0;
end 
// Rb[ 3 ]
initial
begin
	Rb[3] = 1'b1;
	Rb[3] = #80000 1'b0;
end 
// Rb[ 2 ]
initial
begin
	Rb[2] = 1'b0;
end 
// Rb[ 1 ]
initial
begin
	Rb[1] = 1'b0;
end 
// Rb[ 0 ]
initial
begin
	Rb[0] = 1'b0;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
	IR[5] = #50000 1'b1;
	IR[5] = #30000 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b1;
	IR[4] = #80000 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b1;
	IR[3] = #80000 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b0;
end 
endmodule

