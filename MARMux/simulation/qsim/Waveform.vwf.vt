// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2019 07:47:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MARMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MARMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] IR;
reg [15:0] eabOut;
reg selMAR;
// wires                                               
wire [15:0] MARMuxOut;

// assign statements (if any)                          
MARMux i1 (
// port map - connection between master ports and signals/registers   
	.IR(IR),
	.MARMuxOut(MARMuxOut),
	.eabOut(eabOut),
	.selMAR(selMAR)
);
initial 
begin 
#50000 $finish;
end 

// selMAR
initial
begin
	selMAR = 1'b0;
	selMAR = #10000 1'b1;
	selMAR = #10000 1'b0;
	selMAR = #10000 1'b1;
	selMAR = #10000 1'b0;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b0;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
	IR[3] = #30000 1'b1;
	IR[3] = #10000 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b0;
	IR[2] = #30000 1'b1;
	IR[2] = #10000 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b1;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b1;
end 
// eabOut[ 15 ]
initial
begin
	eabOut[15] = 1'b0;
end 
// eabOut[ 14 ]
initial
begin
	eabOut[14] = 1'b0;
end 
// eabOut[ 13 ]
initial
begin
	eabOut[13] = 1'b0;
end 
// eabOut[ 12 ]
initial
begin
	eabOut[12] = 1'b0;
end 
// eabOut[ 11 ]
initial
begin
	eabOut[11] = 1'b0;
end 
// eabOut[ 10 ]
initial
begin
	eabOut[10] = 1'b0;
end 
// eabOut[ 9 ]
initial
begin
	eabOut[9] = 1'b0;
end 
// eabOut[ 8 ]
initial
begin
	eabOut[8] = 1'b0;
end 
// eabOut[ 7 ]
initial
begin
	eabOut[7] = 1'b0;
end 
// eabOut[ 6 ]
initial
begin
	eabOut[6] = 1'b0;
end 
// eabOut[ 5 ]
initial
begin
	eabOut[5] = 1'b0;
	eabOut[5] = #30000 1'b1;
end 
// eabOut[ 4 ]
initial
begin
	eabOut[4] = 1'b0;
	eabOut[4] = #30000 1'b1;
end 
// eabOut[ 3 ]
initial
begin
	eabOut[3] = 1'b1;
	eabOut[3] = #30000 1'b0;
end 
// eabOut[ 2 ]
initial
begin
	eabOut[2] = 1'b1;
	eabOut[2] = #30000 1'b0;
end 
// eabOut[ 1 ]
initial
begin
	eabOut[1] = 1'b0;
end 
// eabOut[ 0 ]
initial
begin
	eabOut[0] = 1'b0;
end 
endmodule

