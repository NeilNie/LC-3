// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/01/2019 13:05:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Bus;
reg [2:0] DR;
reg [2:0] SR0;
reg [2:0] SR1;
reg WE;
reg clk;
reg reset;
// wires                                               
wire [15:0] Out0;
wire [15:0] Out1;

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.Bus(Bus),
	.DR(DR),
	.Out0(Out0),
	.Out1(Out1),
	.SR0(SR0),
	.SR1(SR1),
	.WE(WE),
	.clk(clk),
	.reset(reset)
);
initial 
begin 
#50000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// Bus[ 15 ]
initial
begin
	Bus[15] = 1'b0;
	Bus[15] = #5000 1'b1;
	Bus[15] = #5000 1'b0;
end 
// Bus[ 14 ]
initial
begin
	Bus[14] = 1'b0;
	Bus[14] = #5000 1'b1;
	Bus[14] = #5000 1'b0;
end 
// Bus[ 13 ]
initial
begin
	Bus[13] = 1'b0;
	Bus[13] = #5000 1'b1;
	Bus[13] = #5000 1'b0;
end 
// Bus[ 12 ]
initial
begin
	Bus[12] = 1'b0;
	Bus[12] = #5000 1'b1;
	Bus[12] = #5000 1'b0;
end 
// Bus[ 11 ]
initial
begin
	Bus[11] = 1'b0;
	Bus[11] = #5000 1'b1;
	Bus[11] = #5000 1'b0;
end 
// Bus[ 10 ]
initial
begin
	Bus[10] = 1'b0;
	Bus[10] = #5000 1'b1;
	Bus[10] = #5000 1'b0;
end 
// Bus[ 9 ]
initial
begin
	Bus[9] = 1'b0;
end 
// Bus[ 8 ]
initial
begin
	Bus[8] = 1'b0;
end 
// Bus[ 7 ]
initial
begin
	Bus[7] = 1'b0;
end 
// Bus[ 6 ]
initial
begin
	Bus[6] = 1'b0;
end 
// Bus[ 5 ]
initial
begin
	Bus[5] = 1'b0;
end 
// Bus[ 4 ]
initial
begin
	Bus[4] = 1'b0;
end 
// Bus[ 3 ]
initial
begin
	Bus[3] = 1'b0;
end 
// Bus[ 2 ]
initial
begin
	Bus[2] = 1'b0;
end 
// Bus[ 1 ]
initial
begin
	Bus[1] = 1'b0;
end 
// Bus[ 0 ]
initial
begin
	Bus[0] = 1'b0;
end 
// DR[ 2 ]
initial
begin
	DR[2] = 1'b0;
end 
// DR[ 1 ]
initial
begin
	DR[1] = 1'b0;
	DR[1] = #5000 1'b1;
	DR[1] = #5000 1'b0;
end 
// DR[ 0 ]
initial
begin
	DR[0] = 1'b0;
end 
// SR0[ 2 ]
initial
begin
	SR0[2] = 1'b0;
end 
// SR0[ 1 ]
initial
begin
	SR0[1] = 1'b0;
	SR0[1] = #15000 1'b1;
	SR0[1] = #5000 1'b0;
end 
// SR0[ 0 ]
initial
begin
	SR0[0] = 1'b0;
end 
// SR1[ 2 ]
initial
begin
	SR1[2] = 1'b0;
end 
// SR1[ 1 ]
initial
begin
	SR1[1] = 1'b0;
end 
// SR1[ 0 ]
initial
begin
	SR1[0] = 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #5000 1'b1;
	WE = #5000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

