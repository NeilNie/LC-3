// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/12/2019 15:15:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          LC3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LC3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] DR;
reg [2:0] SR0;
reg [2:0] SR1;
reg [1:0] aluControl;
reg clk;
reg enaALU;
reg enaMARM;
reg enaMDR;
reg enaPC;
reg ldIR;
reg ldMAR;
reg ldMDR;
reg ldPC;
reg memWE;
reg regWE;
reg reset;
reg selEAB1;
reg [1:0] selEAB2;
reg selMAR;
reg selMDR;
reg [1:0] selPC;
// wires                                               
wire [15:0] ALUOut;
wire [15:0] Bus;
wire [15:0] regOut0;
wire [15:0] regOut1;

// assign statements (if any)                          
LC3 i1 (
// port map - connection between master ports and signals/registers   
	.ALUOut(ALUOut),
	.Bus(Bus),
	.DR(DR),
	.SR0(SR0),
	.SR1(SR1),
	.aluControl(aluControl),
	.clk(clk),
	.enaALU(enaALU),
	.enaMARM(enaMARM),
	.enaMDR(enaMDR),
	.enaPC(enaPC),
	.ldIR(ldIR),
	.ldMAR(ldMAR),
	.ldMDR(ldMDR),
	.ldPC(ldPC),
	.memWE(memWE),
	.regOut0(regOut0),
	.regOut1(regOut1),
	.regWE(regWE),
	.reset(reset),
	.selEAB1(selEAB1),
	.selEAB2(selEAB2),
	.selMAR(selMAR),
	.selMDR(selMDR),
	.selPC(selPC)
);
initial 
begin 
#150000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// DR[ 2 ]
initial
begin
	DR[2] = 1'b0;
end 
// DR[ 1 ]
initial
begin
	DR[1] = 1'b0;
	DR[1] = #50000 1'b1;
	DR[1] = #10000 1'b0;
end 
// DR[ 0 ]
initial
begin
	DR[0] = 1'b0;
	DR[0] = #40000 1'b1;
	DR[0] = #10000 1'b0;
end 
// SR0[ 2 ]
initial
begin
	SR0[2] = 1'b0;
end 
// SR0[ 1 ]
initial
begin
	SR0[1] = 1'b0;
end 
// SR0[ 0 ]
initial
begin
	SR0[0] = 1'b0;
	SR0[0] = #70000 1'b1;
	SR0[0] = #20000 1'b0;
end 
// SR1[ 2 ]
initial
begin
	SR1[2] = 1'b0;
end 
// SR1[ 1 ]
initial
begin
	SR1[1] = 1'b0;
	SR1[1] = #70000 1'b1;
	SR1[1] = #20000 1'b0;
end 
// SR1[ 0 ]
initial
begin
	SR1[0] = 1'b0;
end 

// regWE
initial
begin
	regWE = 1'b0;
	regWE = #40000 1'b1;
	regWE = #20000 1'b0;
end 
// aluControl[ 1 ]
initial
begin
	aluControl[1] = 1'b0;
end 
// aluControl[ 0 ]
initial
begin
	aluControl[0] = 1'b0;
	aluControl[0] = #70000 1'b1;
	aluControl[0] = #20000 1'b0;
end 

// enaALU
initial
begin
	enaALU = 1'b0;
	enaALU = #70000 1'b1;
	enaALU = #60000 1'b0;
end 

// enaMARM
initial
begin
	enaMARM = 1'b0;
end 

// enaMDR
initial
begin
	enaMDR = 1'b0;
end 

// enaPC
initial
begin
	enaPC = 1'b1;
	enaPC = #60000 1'b0;
end 

// ldIR
initial
begin
	ldIR = 1'b0;
end 

// ldMAR
initial
begin
	ldMAR = 1'b0;
end 

// ldMDR
initial
begin
	ldMDR = 1'b0;
end 

// memWE
initial
begin
	memWE = 1'b0;
end 

// ldPC
initial
begin
	ldPC = 1'b1;
	ldPC = #40000 1'b0;
end 
// selPC[ 1 ]
initial
begin
	selPC[1] = 1'b0;
end 
// selPC[ 0 ]
initial
begin
	selPC[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// selEAB1
initial
begin
	selEAB1 = 1'b0;
end 
// selEAB2[ 1 ]
initial
begin
	selEAB2[1] = 1'b0;
end 
// selEAB2[ 0 ]
initial
begin
	selEAB2[0] = 1'b0;
end 

// selMAR
initial
begin
	selMAR = 1'b0;
end 

// selMDR
initial
begin
	selMDR = 1'b0;
end 
endmodule

